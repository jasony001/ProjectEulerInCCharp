using System;
using System.Collections.Generic;
using System.Linq;
using ProjectEulerDataContracts;

namespace ProjectEulerLib
{
    public class Problem29Solver : ProblemSolver
    {

        List<List<string>> sourceCodeLinesList = new List<List<string>>{
            new List<string> {

            },
            new List<string>{

            },
            new List<string>{

            }
        };

        public Problem29Solver() : base()
        {
            Problem.Id = 10;
            Problem.UpperBound = 10;
            Problem.IsClosedOnRight = true;
            Problem.Title = "Distinct powers";
            Problem.Description = 
@"Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

    2^2=4, 2^3=8, 2^4=16, 2^5=32
    3^2=9, 3^3=27, 3^4=81, 3^5=243
    4^2=16, 4^3=64, 4^4=256, 4^5=1024
    5^2=25, 5^3=125, 5^4=625, 5^5=3125

If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?";

            Problem.Solutions.Add(new Solution
            {
                ProblemId = 29,
                Description = "",
                Version = 1,
                SolutionCodes = ConvertStringListToSolutionCodeList(sourceCodeLinesList[0])
            });
            // Problem.Solutions.Add(new Solution
            // {
            //     ProblemId = 0,
            //     Description = "",
            //     Version = 2,
            //     SolutionCodes = ConvertStringListToSolutionCodeList(sourceCodeLinesList[1])
            // });
            // Problem.Solutions.Add(new Solution
            // {
            //     ProblemId = 0,
            //     Description = "",
            //     Version = 3,
            //     SolutionCodes = ConvertStringListToSolutionCodeList(sourceCodeLinesList[2])
            // });
        }

        public override string solution1()
        {
            MoreMath.FactorCalculator worker = new MoreMath.FactorCalculator();
            List<List<long>> listOfNumberFactors = new List<List<long>>();
            listOfNumberFactors.Add(new List<long>());
            listOfNumberFactors.Add(new List<long>{});
            listOfNumberFactors.Add(new List<long>{});
            listOfNumberFactors.Add(new List<long>{});


            for (long i = 4; i <= Problem.CalculatedIncludedUpperBound; i ++)
            {
                List<long> factors = worker.GetFactors(i);
                factors.Remove(1);
                factors.Remove(i);
                listOfNumberFactors.Add(factors);
            }

            int [] deductList = new int[11];
            deductList[0] = 0;
            deductList[1] = 0;

            for(int i = 4; i <=Problem.CalculatedIncludedUpperBound; i ++)
            {
                if (listOfNumberFactors[i].Contains(2))  deductList[2] ++;
                if (listOfNumberFactors[i].Contains(2))  deductList[3] ++;
                if (listOfNumberFactors[i].Contains(3))  deductList[2] ++;
                // if (listOfNumberFactors[i].Contains(2)) 
                //     for(int d = 2; d <=10; d ++) deductList[d] ++;

                // if (listOfNumberFactors[i].Contains(3)) 
                //     for(int d = 2; d <=4; d ++) deductList[d] ++;

                // if (listOfNumberFactors[i].Contains(4)) 
                //     for(int d = 2; d <=3; d ++) deductList[d] ++;

                // if (listOfNumberFactors[i].Contains(5) || listOfNumberFactors[i].Contains(6)) 
                //     deductList[2] ++;
            }

            int totalDeduction = deductList.Sum(d => d);
            

            return ((Problem.CalculatedIncludedUpperBound -1)* (Problem.CalculatedIncludedUpperBound -1) - totalDeduction).ToString();
        }

        public override string solution2()
        {
            
            for(i = 2; i <= 10; i ++)
            {

            }
            List<long> powerOf2List = new List<long> {1, 2, 4, 8, 16, 32, 64};
            List<long> powerOf3List = new List<long> {1, 3, 9, 27, 81};
            List<long> PowerOf5List = new List<long> {1, 5, 25}
            return "";
        }

        public override string solution3()
        {
            return "";
        }
    }
}
