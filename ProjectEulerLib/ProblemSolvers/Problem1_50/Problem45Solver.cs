using System;
using System.Collections.Generic;
using System.Linq;
using ProjectEulerDataContracts;

namespace ProjectEulerLib
{
    public class Problem45Solver : ProblemSolver
    {
        public Problem45Solver() : base()
        {
            Problem.Id = 45;
            Problem.UpperBound = 20;
            Problem.IsClosedOnRight = true;
            Problem.Title = "Triangular, pentagonal, and hexagonal";
            Problem.Description =
@"Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
Triangle 	  	Tn=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
Pentagonal 	  	Pn=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
Hexagonal 	  	Hn=n(2n−1) 	  	1, 6, 15, 28, 45, ...

It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.";

            Problem.Solutions.Add(new Solution
            {
                ProblemId = 45,
                Description = "Starting with n = 286, calculate triangle number, test if it's also pentagonal and hexagonal",
                Version = 1,
            });
            // Problem.Solutions.Add(new Solution
            // {
            //     ProblemId = 0,
            //     Description = "",
            //     Version = 2,
            // });
            // Problem.Solutions.Add(new Solution
            // {
            //     ProblemId = 0,
            //     Description = "",
            //     Version = 3,
            // });
        }

        public override string solution1()
        {
            long n = 286;
            long tn = -1;
            bool found = false;
            MoreMath.SpecialNumberCalculator specialNumberCalculator = new MoreMath.SpecialNumberCalculator();
            while (!found)
            {
                tn = specialNumberCalculator.GetNthTriangleNumber(n);
                found = specialNumberCalculator.IsPentagonNumber(tn) && specialNumberCalculator.IsHexagonalNumber(tn);
                n++;
            }

            long nForP = specialNumberCalculator.ReversePentagonNumber(tn);
            long nForH = specialNumberCalculator.ReverseHexagonalNumber(tn);
            string answer = $"t({n - 1}) = {tn}; p({nForP}) = h({nForH}) = {tn}";
            return tn.ToString() + ": " + answer;
        }

        public override string solution2()
        {
            return "";
        }

        public override string solution3()
        {
            return "";
        }
    }
}
