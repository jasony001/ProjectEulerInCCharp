using System;
using System.Collections.Generic;
using System.Linq;
using ProjectEulerDataContracts;

namespace ProjectEulerLib
{
    public class Problem44Solver : ProblemSolver
    {
        public Problem44Solver() : base()
        {
            Problem.Id = 44;
            Problem.UpperBound = 20;
            Problem.IsClosedOnRight = true;
            Problem.Title = "Pentagon numbers";
            Problem.Description = 
@"Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?";

            Problem.Solutions.Add(new Solution
            {
                ProblemId = 44,
                Description = 
@"the goal is find first pi amd pj where i > j and pi + pj = pm and pi - pj = pm. 
Start with i = 2, calculate pentagon number, add to list, loop j from 1 to i - 1, get pentagon number from the list. 
If pi + pj and pi - pj are both pentagon, answer is found.
This solution is valid with the assumption that such pair exists. Should probably set an upper limit for i where we give up.
",
                Version = 1,
            });
            // Problem.Solutions.Add(new Solution
            // {
            //     ProblemId = 0,
            //     Description = "",
            //     Version = 2,
            // });
            // Problem.Solutions.Add(new Solution
            // {
            //     ProblemId = 0,
            //     Description = "",
            //     Version = 3,
            // });
        }


        public override string solution1()
        {
            // pi + pj = pm; pi - pj = pn
            bool found = false;
            MoreMath.SpecialNumberCalculator specialNumberCalculator = new MoreMath.SpecialNumberCalculator();
            int j = 1; 
            int i = 2;
            List<long> pentagonNumberList = new List<long>{0, 1};
            while(!found)
            {
                long pi = specialNumberCalculator.GetNthPentagonNumber(i);
                pentagonNumberList.Add(pi);
                for(j = 1; j < i; j ++)
                {
                    long pj = pentagonNumberList[j];
                    if (specialNumberCalculator.IsPentagonNumber(pi + pj) && specialNumberCalculator.IsPentagonNumber(pi - pj))
                    {
                        long reversePIPlusPJ = specialNumberCalculator.ReversePentagonNumber(pi + pj);
                        long reversePIMinusPJ = specialNumberCalculator.ReversePentagonNumber(pi - pj);
                        string answer = $"i = {i}, j = {j}, pi = {pi}, pj = {pj}, pi + pj = {pi + pj} = p(${reversePIPlusPJ}), pi - pj = {pi - pj} = p(${reversePIMinusPJ})";
                        return (pi - pj).ToString() + " : " + answer;
                    }
                }

                i++;
            }

            return "";
        }

        public override string solution2()
        {
            return "";
        }

        public override string solution3()
        {
            return "";
        }
    }
}
