using System;
using System.Collections.Generic;
using System.Linq;
using ProjectEulerDataContracts;

namespace ProjectEulerLib
{
    public class Problem61Solver : ProblemSolver
    {
        long _lowerBound = 1000;

        public Problem61Solver() : base()
        {
            Problem.Id = 61;
            Problem.UpperBound = 10000;
            Problem.IsClosedOnRight = false;
            Problem.Title = "Cyclical figurate numbers";
            Problem.Description =
@"

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:
Triangle 	  	P3,n=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
Square 	  	    P4,n=n2 	  	    1, 4, 9, 16, 25, ...
Pentagonal 	  	P5,n=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
Hexagonal 	  	P6,n=n(2n−1) 	  	1, 6, 15, 28, 45, ...
Heptagonal 	  	P7,n=n(5n−3)/2 	  	1, 7, 18, 34, 55, ...
Octagonal 	  	P8,n=n(3n−2) 	  	1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

    The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
    Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
    This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
";

            Problem.Solutions.Add(new Solution
            {
                ProblemId = 61,
                Description =
@"
The 6 numbers in the answer can be in any order.
Build number array [6][], one for each type, 1000 ~ 9999
foreach permtation of index 0 1 2 3 4 5 - 720 of them
6 level of loop, find numbers that satisfy: n0%100 = n1 / 100, n1%100=n2/100, ... n5%100=n0/10
",
                Version = 1,
            });
            // Problem.Solutions.Add(new Solution
            // {
            //     ProblemId = 0,
            //     Description = "",
            //     Version = 2,
            // });
            // Problem.Solutions.Add(new Solution
            // {
            //     ProblemId = 0,
            //     Description = "",
            //     Version = 3,
            // });
        }

        public override string solution1()
        {
            long[][] numbers = new long[6][]
            {
                GetTraianglesUnderN(Problem.CalculatedIncludedUpperBound),
                GetSquaresUnderN(Problem.CalculatedIncludedUpperBound),
                GetPentagonalsUnderN(Problem.CalculatedIncludedUpperBound),
                GetHexganolsUnderN(Problem.CalculatedIncludedUpperBound),
                GetHeptagonalsUnderN(Problem.CalculatedIncludedUpperBound),
                GetOctagonals(Problem.CalculatedIncludedUpperBound)
            };

            int[] indecies = new int[] { 0, 1, 2, 3, 4, 5 };
            MoreMath.CombinationCalculator combinationCalculator = new MoreMath.CombinationCalculator();
            foreach (List<int> indexList in combinationCalculator.ListPermutations<int>(indecies.ToList()))
            {
                foreach (long n0 in numbers[indexList[0]])
                {
                    foreach (long n1 in numbers[indexList[1]])
                    {
                        if (n1 / 100 != n0 % 100) continue;
                        foreach (long n2 in numbers[indexList[2]])
                        {
                            if (n2 / 100 != n1 % 100) continue;
                            foreach (long n3 in numbers[indexList[3]])
                            {
                                if (n3 / 100 != n2 % 100) continue;
                                foreach (long n4 in numbers[indexList[4]])
                                {
                                    if (n4 / 100 != n3 % 100) continue;
                                    foreach (long n5 in numbers[indexList[5]])
                                    {
                                        if (n5 / 100 != n4 % 100) continue;
                                        if (n5 % 100 != n0 / 100) continue;

                                        return (n0 + n1 + n2 + n3 + n4 + n5).ToString();
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return "no solution found";
        }

        private long[] GetOctagonals(long calculatedIncludedUpperBound)
        {
            MoreMath.SpecialNumberCalculator specialNumberCalculator = new MoreMath.SpecialNumberCalculator();

            List<long> octNumbers = new List<long>();
            long oct = 0;
            long n = 1;
            while (oct < Problem.CalculatedIncludedUpperBound)
            {
                oct = n * (3 * n - 2);//specialNumberCalculator.GetNthOctagonalNumber(n);
                if (oct >= _lowerBound)
                    octNumbers.Add(oct);
                n++;
            }

            return octNumbers.ToArray();
        }

        private long[] GetHeptagonalsUnderN(long calculatedIncludedUpperBound)
        {
            MoreMath.SpecialNumberCalculator specialNumberCalculator = new MoreMath.SpecialNumberCalculator();

            List<long> hepNumbers = new List<long>();
            long hep = 0;
            long n = 1;
            while (hep < Problem.CalculatedIncludedUpperBound)
            {
                hep = n * (5 * n - 3) / 2; // specialNumberCalculator.GetNthHeptagonalNumber(n);
                if (hep >= _lowerBound) hepNumbers.Add(hep);
                n++;
            }

            return hepNumbers.ToArray();
        }

        private long[] GetHexganolsUnderN(long calculatedIncludedUpperBound)
        {
            MoreMath.SpecialNumberCalculator specialNumberCalculator = new MoreMath.SpecialNumberCalculator();

            List<long> hexNumbers = new List<long>();
            long hex = 0;
            long n = 1;
            while (hex < Problem.CalculatedIncludedUpperBound)
            {
                hex = n * (2 * n - 1);//specialNumberCalculator.GetNthHexagonalNumber(n);
                if (hex >= _lowerBound) hexNumbers.Add(hex);
                n++;
            }

            return hexNumbers.ToArray();
        }

        private long[] GetPentagonalsUnderN(long calculatedIncludedUpperBound)
        {
            MoreMath.SpecialNumberCalculator specialNumberCalculator = new MoreMath.SpecialNumberCalculator();

            List<long> penNumbers = new List<long>();
            long pen = 0;
            long n = 1;
            while (pen < Problem.CalculatedIncludedUpperBound)
            {
                pen = n * (3 * n - 1) / 2;// specialNumberCalculator.GetNthPentagonNumber(n);
                if (pen >= _lowerBound) penNumbers.Add(pen);
                n++;
            }

            return penNumbers.ToArray();
        }

        private long[] GetSquaresUnderN(long calculatedIncludedUpperBound)
        {
            MoreMath.SpecialNumberCalculator specialNumberCalculator = new MoreMath.SpecialNumberCalculator();

            List<long> squares = new List<long>();
            long square = 0;
            long n = 1;
            while (square < Problem.CalculatedIncludedUpperBound)
            {
                square = n * n;// specialNumberCalculator.GetNthSquare(n);
                if (square >= _lowerBound) squares.Add(square);
                n++;
            }

            return squares.ToArray();
        }

        private long[] GetTraianglesUnderN(long calculatedIncludedUpperBound)
        {
            MoreMath.SpecialNumberCalculator specialNumberCalculator = new MoreMath.SpecialNumberCalculator();

            List<long> traingleNumbers = new List<long>();
            long triangleNumber = 0;
            long n = 1;
            while (triangleNumber < Problem.CalculatedIncludedUpperBound)
            {
                triangleNumber = n * (n + 1) / 2;// specialNumberCalculator.GetNthTriangleNumber(n);
                if (triangleNumber >= _lowerBound) traingleNumbers.Add(triangleNumber);
                n++;
            }

            return traingleNumbers.ToArray();
        }

        public override string solution2()
        {
            return "";
        }

        public override string solution3()
        {
            return "";
        }
    }
}
